---
import { Image } from "astro:assets"
import Button from "./Button.astro"

interface Props {
  title: string
  buttonName: string
  buttonIcon: string
}

const { title, buttonName, buttonIcon } = Astro.props
---

<div
  data-aos={title === "Sadhna Kaithwas" ? "fade-right" : "fade-left"}
  class="grid gap-3 text-center lg:text-start"
>
  {
    title === "Sadhna Kaithwas" ? (
      <>
        <h2 class="text-5xl sm:text-6xl lg:text-7xl text-clr-primary font-bold dark:text-white">
          Hello, I'm{" "}
          <span class="text-gradient whitespace-nowrap">{title}</span>
        </h2>
        <div class="flex gap-3 items-center justify-center lg:justify-normal">
          <span class="w-20 rounded-md h-1 bg-clr-yellow" />
          <h4 class="typing-text text-4xl font-medium text-clr-yellow inline" />
        </div>
      </>
    ) : (
      <h2 class="text-5xl sm:text-6xl lg:text-7xl text-clr-primary font-bold dark:text-white">
        I'm <span class="text-gradient">{title}</span>
      </h2>
    )
  }

  <p><slot /></p>

  <div class="flex items-center gap-7 justify-center lg:justify-normal">
    <Button name={buttonName} icon={buttonIcon} href="#contact" />
    {
      title === "Sadhna Kaithwas" && (
        <div class="flex gap-5 border-l-2 border-clr-primary dark:border-white pl-7 pt-2">
          <a
            href="https://www.instagram.com/sadhna.kaithwas/"
            target="_blank"
            class="text-4xl transition duration-300 hover:text-clr-yellow"
          >
            <i class="uil uil-instagram" />
          </a>

          <a
            href="https://twitter.com/KaithwasSadhna"
            target="_blank"
            class="text-4xl transition duration-300 hover:text-clr-yellow"
          >
            <i class="uil uil-twitter-alt" />
          </a>
        </div>
      )
    }
  </div>
</div>

<style>
  .typing-text {
    display: inline-block;
    border-right: 2px solid #000;
    padding-right: 10px;
    white-space: nowrap;
    overflow: hidden;
    animation:
      typing 1s steps(15, end),
      blink-caret 0.5s step-end infinite;
  }

  /* @keyframes typing {
    from {
      width: 0;
    }
    to {
      width: 100%;
    }
  } */

  @keyframes blink-caret {
    from,
    to {
      border-color: transparent;
    }
    50% {
      border-color: #000;
    }
  }
</style>

<script>
  // script.js
  const phrases = ["Storyboard Animator", "Lifelong Learner"]
  const typingText = document.querySelector(
    ".typing-text"
  ) as HTMLHeadingElement

  let phraseIndex = 0
  let charIndex = 0
  let isDeleting = false

  function type() {
    const currentText = typingText.textContent
    const currentPhrase = phrases[phraseIndex]

    if (!isDeleting) {
      typingText.textContent = currentPhrase.substring(0, charIndex + 1)
      charIndex++
    } else {
      typingText.textContent = currentPhrase.substring(0, charIndex - 1)
      charIndex--
    }

    if (charIndex === currentPhrase.length && !isDeleting) {
      isDeleting = true
    }

    if (charIndex === 0 && isDeleting) {
      isDeleting = false
      phraseIndex = (phraseIndex + 1) % phrases.length
    }

    // const typingSpeed = isDeleting ? 150 : 100

    setTimeout(type, 200)
  }

  document.addEventListener("DOMContentLoaded", type)
</script>
